{
    "website_title": "Mi blog",
    "website_url": "/blog/",
    "posts": [
        
            {
                "title": "Servidor de lxc en Debian",
                "content_text": "IntroducciónHace tiempo hice una guía para crear un servidor de virtualización, pero me dí cuenta que muchas veces no ocupamos una maquina virtual entera, su disco, ram y cpu asignado puede llegar a ser mas de lo que ocupamos. Además de que después de un tiempo, las imágenes de disco aumentan mucho de tamaño. Para estos casos existen los contenedores.En esta guía explicaré como correr contenedores lxc en Debian 11, además de configurar el puente de red para que los contenedores puedan acceder a la red local.¿Qué es un contenedor?Los contenedores son simplemente procesos corriendo en el host, se puede decir que son una especie de chroot con esteroides.Los contenedores mas conocidos son los que se manipulan con docker o podman, sin embargo, estos se plantean para un solo proceso, comúnmente una aplicación web, que se ve como algo sin importancia pues siempre se puede borrar y crear otro rápidamente y sin mayor problema, pero que tal si queremos el sistema operativo entero, con todo y su init, pues para eso existe lxc que trata a los contenedores mas como máquinas virtuales, sin dejar de ser ligero pues sigue usando el mismo kernel que con la ayuda de la combinación de cgroups y namespaces consigue aislar los procesos completamente además de poder correr rootless.Requerimientos  Computadora con Debian o derivada.  Conexión de Ethernet directa (Para el puente de red)Instalar lo necesarioEn primer lugar es necesario instalar lo necesario para correr los contenedores y crear el puente.sudo apt-get install lxc libvirt0 bridge-utils uidmapPuente de redAhora es necesario verificar nuestra conexión a la red, esto se puede conseguir con el comando.ip aEjemplo del resultado1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo     valid_lft forever preferred_lft forever    inet6 ::1/128 scope host      valid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff    inet 192.168.122.220/24 brd 192.168.122.255 scope global dynamic enp1s0     valid_lft 3538sec preferred_lft 3538sec    inet6 fe80::5054:ff:feda:fdb4/64 scope link      valid_lft forever preferred_lft foreverDesde aquí podemos verificar que la interfaz de nuestra conexión por Ethernet tiene como nombre enp1s0 y la ip es 192.168.122.220, sabiendo esto podemos crear el puente, necesitamos entrar al archivo de configuración de interfaces. En Debian es /etc/network/interfacesvim /etc/network/interfacesDentro debemos de escribir la configuración del puente, tras modificar el archivo debe quedar así (revisa la ip, gateway y el nombre de la interfaz pues pueden no ser las mismas).# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceallow-hotplug enp1s0iface enp1s0 inet staticauto br0iface br0 inet static    address 192.168.122.220    netmask 255.255.255.0    gateway 192.168.122.1    bridge_ports enp1s0    up /usr/sbin/brctl stp br0 onYa que estamos seguros de nuestra configuración, reiniciaremos para que estas configuraciones se apliquen. Al reiniciar podremos ver nuestra configuración algo así.1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00     inet 127.0.0.1/8 scope host lo      valid_lft forever preferred_lft forever     inet6 ::1/128 scope host       valid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000     link/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000     link/ether da:64:e7:16:20:c8 brd ff:ff:ff:ff:ff:ff     inet 192.168.122.220/24 brd 192.168.122.255 scope global br0      valid_lft forever preferred_lft forever     inet6 fe80::d864:e7ff:fe16:20c8/64 scope link       valid_lft forever preferred_lft foreverComo podemos observar, ahora nuestra conexión se encuentra en la interfaz br0 que es nuestro puente.¡Listo! Ya tenemos red, ahora podemos empezar a crear nuestros contenedores con lxc.Configuración de lxcPara correr contenedores sin root (lo mejor), debemos de revisar algunas cosas, en primer lugar, asegurarnos que este habilitado la función en el kernel.sudo sysctl kernel.unprivileged_userns_cloneSi es igual a 1, es que esta habilitado. En segundo lugar debemos verificar que nuestro usuario tenga asignadas las uid y gid, esto se hace con.cat /etc/s*id|grep $USERDebe de salir algo comousuario:100000:65536usuario:100000:65536Si todo es correcto, ahora modificaremos la configuración de lxc en /etc/lxc/default.conf debe de estar así:# Subuid y subgid lxc.idmap = u 0 100000 65536lxc.idmap = g 0 100000 65536# Configuración de redlxc.net.0.type = vethlxc.net.0.link = br0lxc.net.0.flags = up# Capacidades de los contenedoreslxc.apparmor.profile = lxc-container-default-cgns# Puedes cambiar a 1 si vas a correr contenedor dentro# de contenedor.lxc.apparmor.allow_nesting = 0Y /etc/lxc/lxc-usernet debe de verse así:usuario veth br0 10Por último debemos de agregar una variable de ambiente, esto se puede hacer en el .bashrc del usuario, debemos agregar:export DOWNLOAD_KEYSERVER=\"hkp://keyserver.ubuntu.com\"¡Listo!¿Cómo usar contenedores lxc?Como se mencionó al inicio, hicimos la configuración para correr contenedores rootless por lo que estos comandos se deben correr como usuario.Crear un contenedorPara usar un contenedor primero lo debemos de generar a partir de una plantilla, en este caso la plantilla “download” y se le asigna un nombre para identificarlo. La plantilla download es especial, te permitirá crear un contenedor a partir de varias distribuciones, escoge la que más te convenga.lxc-create --name test -t downloadManipular el contenedorPara iniciar el contenedor en modo no privilegiado:lxc-unpriv-start testPara obtener un shell dentro:lxc-unpriv-attach testPara detener el contenedor:lxc-stop testDudasNo tengo redAl tener que conectarse a la red local, al contenedor le toma algo de tiempo recibir una ip, ten paciencia y probablemente se resuelva.Me marca un error en la llave gpgPara eso es la variable que exportamos, sal y vuelve a entrar para que se cargue correctamente.Error en la configuraciónAlgunas veces se queja por no tener una configuración individual del usuario, configurala en $HOME/.config/lxc/default.conflxc.include = /etc/lxc/default.conflxc.idmap = u 0 100000 65536lxc.idmap = g 0 100000 65536 lxc.net.0.type = vethlxc.net.0.link = br0lxc.net.0.flags = uplxc.apparmor.profile = lxc-container-default-cgnslxc.apparmor.allow_nesting = 0¿Dónde se almacena el contenedor?Los contenedores se almacenan en $HOME/.local/share/lxc en caso de querer modificar su ubicación se puede hacer desde la configuración individual de cada contenedor, en mi caso prefiero hacer un soft link al directorio donde lo quiero.ConclusiónLas máquinas virtuales son muy útiles pero muchas veces son mas de lo que necesitamos, por lo que para la mayoría de casos un contenedor lxc es mucho mas útil. Solo recuerda que no es el mismo nivel de aislamiento. Espero que esta guía te haya sido de utilidad, hasta luego. :)",
                "content_html": "<h2 id=\"introducción\">Introducción</h2><p>Hace tiempo hice una guía para crear un servidor de virtualización, pero me dí cuenta que muchas veces no ocupamos una maquina virtual entera, su disco, ram y cpu asignado puede llegar a ser mas de lo que ocupamos. Además de que después de un tiempo, las imágenes de disco aumentan mucho de tamaño. Para estos casos existen los contenedores.</p><p>En esta guía explicaré como correr contenedores lxc en Debian 11, además de configurar el puente de red para que los contenedores puedan acceder a la red local.</p><h2 id=\"qué-es-un-contenedor\">¿Qué es un contenedor?</h2><p>Los contenedores son simplemente procesos corriendo en el host, se puede decir que son una especie de <a href=\"https://man7.org/linux/man-pages/man2/chroot.2.html\">chroot</a> con esteroides.</p><p>Los contenedores mas conocidos son los que se manipulan con <a href=\"https://www.docker.com/\">docker</a> o <a href=\"https://podman.io/\">podman</a>, sin embargo, estos se plantean para un solo proceso, comúnmente una aplicación web, que se ve como algo sin importancia pues siempre se puede borrar y crear otro rápidamente y sin mayor problema, pero que tal si queremos el sistema operativo entero, con todo y su init, pues para eso existe <a href=\"https://en.wikipedia.org/wiki/LXC\">lxc</a> que trata a los contenedores mas como máquinas virtuales, sin dejar de ser ligero pues sigue usando el mismo kernel que con la ayuda de la combinación de <a href=\"https://en.wikipedia.org/wiki/Cgroups\">cgroups</a> y <a href=\"https://en.wikipedia.org/wiki/Linux_namespaces\">namespaces</a> consigue aislar los procesos completamente además de poder correr rootless.</p><h2 id=\"requerimientos\">Requerimientos</h2><ul>  <li>Computadora con Debian o derivada.</li>  <li>Conexión de Ethernet directa (Para el puente de red)</li></ul><h2 id=\"instalar-lo-necesario\">Instalar lo necesario</h2><p>En primer lugar es necesario instalar lo necesario para correr los contenedores y crear el puente.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install lxc libvirt0 bridge-utils uidmap</code></pre></div></div><h2 id=\"puente-de-red\">Puente de red</h2><p>Ahora es necesario verificar nuestra conexión a la red, esto se puede conseguir con el comando.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ip a</code></pre></div></div><h3 id=\"ejemplo-del-resultado\">Ejemplo del resultado</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo     valid_lft forever preferred_lft forever    inet6 ::1/128 scope host      valid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff    inet 192.168.122.220/24 brd 192.168.122.255 scope global dynamic enp1s0     valid_lft 3538sec preferred_lft 3538sec    inet6 fe80::5054:ff:feda:fdb4/64 scope link      valid_lft forever preferred_lft forever</code></pre></div></div><p>Desde aquí podemos verificar que la interfaz de nuestra conexión por Ethernet tiene como nombre enp1s0 y la ip es 192.168.122.220, sabiendo esto podemos crear el puente, necesitamos entrar al archivo de configuración de interfaces. En Debian es /etc/network/interfaces</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vim /etc/network/interfaces</code></pre></div></div><p>Dentro debemos de escribir la configuración del puente, tras modificar el archivo debe quedar así (revisa la ip, gateway y el nombre de la interfaz pues pueden no ser las mismas).</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceallow-hotplug enp1s0iface enp1s0 inet staticauto br0iface br0 inet static    address 192.168.122.220    netmask 255.255.255.0    gateway 192.168.122.1    bridge_ports enp1s0    up /usr/sbin/brctl stp br0 on</code></pre></div></div><p>Ya que estamos seguros de nuestra configuración, reiniciaremos para que estas configuraciones se apliquen. Al reiniciar podremos ver nuestra configuración algo así.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00     inet 127.0.0.1/8 scope host lo      valid_lft forever preferred_lft forever     inet6 ::1/128 scope host       valid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000     link/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000     link/ether da:64:e7:16:20:c8 brd ff:ff:ff:ff:ff:ff     inet 192.168.122.220/24 brd 192.168.122.255 scope global br0      valid_lft forever preferred_lft forever     inet6 fe80::d864:e7ff:fe16:20c8/64 scope link       valid_lft forever preferred_lft forever</code></pre></div></div><p>Como podemos observar, ahora nuestra conexión se encuentra en la interfaz br0 que es nuestro puente.</p><p><strong>¡Listo!</strong> Ya tenemos red, ahora podemos empezar a crear nuestros contenedores con lxc.</p><h2 id=\"configuración-de-lxc\">Configuración de lxc</h2><p>Para correr contenedores sin root (lo mejor), debemos de revisar algunas cosas, en primer lugar, asegurarnos que este habilitado la función en el kernel.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo sysctl kernel.unprivileged_userns_clone</code></pre></div></div><p>Si es igual a 1, es que esta habilitado. En segundo lugar debemos verificar que nuestro usuario tenga asignadas las uid y gid, esto se hace con.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cat /etc/s*id|grep $USER</code></pre></div></div><p>Debe de salir algo como</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>usuario:100000:65536usuario:100000:65536</code></pre></div></div><p>Si todo es correcto, ahora modificaremos la configuración de lxc en /etc/lxc/default.conf debe de estar así:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Subuid y subgid lxc.idmap = u 0 100000 65536lxc.idmap = g 0 100000 65536# Configuración de redlxc.net.0.type = vethlxc.net.0.link = br0lxc.net.0.flags = up# Capacidades de los contenedoreslxc.apparmor.profile = lxc-container-default-cgns# Puedes cambiar a 1 si vas a correr contenedor dentro# de contenedor.lxc.apparmor.allow_nesting = 0</code></pre></div></div><p>Y /etc/lxc/lxc-usernet debe de verse así:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>usuario veth br0 10</code></pre></div></div><p>Por último debemos de agregar una variable de ambiente, esto se puede hacer en el .bashrc del usuario, debemos agregar:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>export DOWNLOAD_KEYSERVER=\"hkp://keyserver.ubuntu.com\"</code></pre></div></div><p>¡Listo!</p><h2 id=\"cómo-usar-contenedores-lxc\">¿Cómo usar contenedores lxc?</h2><p>Como se mencionó al inicio, hicimos la configuración para correr contenedores rootless por lo que estos comandos se deben correr como usuario.</p><h3 id=\"crear-un-contenedor\">Crear un contenedor</h3><p>Para usar un contenedor primero lo debemos de generar a partir de una plantilla, en este caso la plantilla “download” y se le asigna un nombre para identificarlo. La plantilla download es especial, te permitirá crear un contenedor a partir de varias distribuciones, escoge la que más te convenga.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lxc-create --name test -t download</code></pre></div></div><h3 id=\"manipular-el-contenedor\">Manipular el contenedor</h3><p>Para iniciar el contenedor en modo no privilegiado:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lxc-unpriv-start test</code></pre></div></div><p>Para obtener un shell dentro:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lxc-unpriv-attach test</code></pre></div></div><p>Para detener el contenedor:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lxc-stop test</code></pre></div></div><h2 id=\"dudas\">Dudas</h2><h3 id=\"no-tengo-red\">No tengo red</h3><p>Al tener que conectarse a la red local, al contenedor le toma algo de tiempo recibir una ip, ten paciencia y probablemente se resuelva.</p><h3 id=\"me-marca-un-error-en-la-llave-gpg\">Me marca un error en la llave gpg</h3><p>Para eso es la variable que exportamos, sal y vuelve a entrar para que se cargue correctamente.</p><h3 id=\"error-en-la-configuración\">Error en la configuración</h3><p>Algunas veces se queja por no tener una configuración individual del usuario, configurala en $HOME/.config/lxc/default.conf</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lxc.include = /etc/lxc/default.conflxc.idmap = u 0 100000 65536lxc.idmap = g 0 100000 65536 lxc.net.0.type = vethlxc.net.0.link = br0lxc.net.0.flags = uplxc.apparmor.profile = lxc-container-default-cgnslxc.apparmor.allow_nesting = 0</code></pre></div></div><h3 id=\"dónde-se-almacena-el-contenedor\">¿Dónde se almacena el contenedor?</h3><p>Los contenedores se almacenan en $HOME/.local/share/lxc en caso de querer modificar su ubicación se puede hacer desde la configuración individual de cada contenedor, en mi caso prefiero hacer un soft link al directorio donde lo quiero.</p><h2 id=\"conclusión\">Conclusión</h2><p>Las máquinas virtuales son muy útiles pero muchas veces son mas de lo que necesitamos, por lo que para la mayoría de casos un contenedor lxc es mucho mas útil. Solo recuerda que no es el mismo nivel de aislamiento. Espero que esta guía te haya sido de utilidad, hasta luego. :)</p>",
                "url": "/blog/container/2021/12/16/lxc-server",
                
                
                "categories": ["container"],                
                
                "date_published": "2021-12-16T00:00:00+00:00",
                "date_modified": "2021-12-16T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            },
        
            {
                "title": "Virtualización de Windows en GNU/Linux",
                "content_text": "Algunas veces mientras uso GNU/Linux por diversas cuestiones es necesario que use un programa que solo este disponible en sistemas Windows, no por eso es necesario instalar un Windows en una máquina real, para eso existe la virtualización.¿Qué es la virtualización?La virtualización es una tecnología que permite simular que contamos con una computadora dentro de otra computadora, simulamos un disco, una conexión de red, memoria RAM, procesador, bueno entiendes, toda la computadora. Esto con el fin de correr programas de distintos sistemas operativos como es en este caso, aunque normalmente se usa para aislar pues en la virtualización convencional, la maquina simulada no sabe que es una simulación y no tiene acceso a la maquina real por lo que si algo malo pasara dentro de la máquina virtual, en la real solo es cuestión de borrar el archivo que contiene el disco y pum, la maquina virtual fue borrada.Requerimientos  Computadora con virtualización activada en la BIOS.  Espacio en disco libre mínimo de 40GB, recomendablemente un ssd.  8 GB de RAM o mas para una experiencia cómoda.  Procesador de al menos 2 núcleos, recomendablemente 4 núcleos o mas.  Es recomendable tener buena refrigeración de la computadora.Instalar lo necesarioEn primer lugar necesitas instalar virt-manager que será el programa gráfico que usaremos para administrar la máquina virtualEn Debiansudo apt install virt-managerEn Fedorasudo dnf install virt-managerEste deberá de descargar todas las dependencias necesarias como kvm y qemu que son las herramientas que se usaran tras bambalinas.En cuestión de archivos tenemos que descargar la iso de Windows 10 que es windows10 como tal y la iso de virtio que es lo que contiene los controladores necesarios para tener mejor rendimiento.Instalación de Windows 10Abriremos virt-manager y daremos clic en “crear maquina virtual”Seleccionamos instalación localSeleccionamos la ISO de Windows 10Seleccionamos el tipo de sistema operativo como Windows 10Configuramos el número de núcleos y la cantidad de RAMConfiguramos el tamaño del disco que daremos para windows10Escribimos el nombre que deseemos que tenga la máquina virtual, es vital que activemos la opción de configuración previa a la instalaciónCambiamos el tipo de disco a “virtio”Cambiamos el tipo de red a “virtio”Seleccionamos la opción de añadir hardware y configuramos la iso de virtioIniciamos la máquina virtual e instalamos Windows como siempreSeleccionamos que no tenemos licencia (a menos que si tengas)Seleccionamos la versión que deseamos instalar (a menos que ocupes funciones del pro, te recomiendo el home pues es mas ligero)Aceptamos términos y condicionesSeleccionamos instalación personalizadaPodemos ver que no se detecta ningún disco, debemos de seleccionar “cargar controlador”Seleccionamos el controlador que termine con “win10”Ahora podemos ver que tenemos el disco que creamos, lo seleccionamos  e instalamos.Y damos a siguiente para empezar la instalación, toca esperarToca la configuración de siempre al instalar WindowsDe momento no tenemos red pues no hemos cargado el controlador, tendremos que seleccionar “no tengo internet” y crear una cuenta local¡Ya entramos al escritorio!Tenemos que abrir administrador de dispositivosEn otros dispositivos seleccionamos el controlador de Ethernet y damos a actualizar controladorSeleccionamos “Buscar controlador en mi equipo”Seleccionamos el disco de virtio, en mi caso es el “E” y damos siguienteVemos que detecta el controlador de virtio, y damos cerrarEste proceso se repite con todos los controladores de “Otros equipos” y también con el adaptador de pantalla.Igualmente lo instalamos¡Terminamos!Puede que lo notes un poco lento pues Windows hace sus cosas de descargar actualizaciones y demás configuraciones pos-instalación, pero una vez que eso esté, podemos reiniciar y ya contaremos con una maquina virtual de Windows completamente funcional.Espero que te haya sido de utilidad, en caso de querer activar Windows, te puedo recomendar utilizar MAS esto te permitirá personalizar el fondo de pantalla y demás :)",
                "content_html": "<p>Algunas veces mientras uso GNU/Linux por diversas cuestiones es necesario que use un programa que solo este disponible en sistemas Windows, no por eso es necesario instalar un Windows en una máquina real, para eso existe la virtualización.</p><h1 id=\"qué-es-la-virtualización\">¿Qué es la virtualización?</h1><p>La virtualización es una tecnología que permite simular que contamos con una computadora dentro de otra computadora, simulamos un disco, una conexión de red, memoria RAM, procesador, bueno entiendes, toda la computadora. Esto con el fin de correr programas de distintos sistemas operativos como es en este caso, aunque normalmente se usa para aislar pues en la virtualización convencional, la maquina simulada no sabe que es una simulación y no tiene acceso a la maquina real por lo que si algo malo pasara dentro de la máquina virtual, en la real solo es cuestión de borrar el archivo que contiene el disco y pum, la maquina virtual fue borrada.</p><h1 id=\"requerimientos\">Requerimientos</h1><ul>  <li>Computadora con virtualización activada en la BIOS.</li>  <li>Espacio en disco libre mínimo de 40GB, recomendablemente un ssd.</li>  <li>8 GB de RAM o mas para una experiencia cómoda.</li>  <li>Procesador de al menos 2 núcleos, recomendablemente 4 núcleos o mas.</li>  <li>Es recomendable tener buena refrigeración de la computadora.</li></ul><h1 id=\"instalar-lo-necesario\">Instalar lo necesario</h1><p>En primer lugar necesitas instalar virt-manager que será el programa gráfico que usaremos para administrar la máquina virtual</p><p>En Debian</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt install virt-manager</code></pre></div></div><p>En Fedora</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo dnf install virt-manager</code></pre></div></div><p>Este deberá de descargar todas las dependencias necesarias como kvm y qemu que son las herramientas que se usaran tras bambalinas.</p><p>En cuestión de archivos tenemos que descargar la <a href=\"https://www.microsoft.com/es-mx/software-download/windows10ISO\">iso de Windows 10</a> que es windows10 como tal y la <a href=\"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso\">iso de virtio</a> que es lo que contiene los controladores necesarios para tener mejor rendimiento.</p><h1 id=\"instalación-de-windows-10\">Instalación de Windows 10</h1><p>Abriremos virt-manager y daremos clic en “crear maquina virtual”</p><p><img src=\"/blog/assets/pictures/winvirt/virt-01.png\" alt=\"\" /></p><p>Seleccionamos instalación local</p><p><img src=\"/blog/assets/pictures/winvirt/virt-02.png\" alt=\"\" /></p><p>Seleccionamos la ISO de Windows 10</p><p><img src=\"/blog/assets/pictures/winvirt/virt-03.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-04.png\" alt=\"\" /></p><p>Seleccionamos el tipo de sistema operativo como Windows 10</p><p><img src=\"/blog/assets/pictures/winvirt/virt-05.png\" alt=\"\" /></p><p>Configuramos el número de núcleos y la cantidad de RAM</p><p><img src=\"/blog/assets/pictures/winvirt/virt-06.png\" alt=\"\" /></p><p>Configuramos el tamaño del disco que daremos para windows10</p><p><img src=\"/blog/assets/pictures/winvirt/virt-07.png\" alt=\"\" /></p><p>Escribimos el nombre que deseemos que tenga la máquina virtual, es vital que activemos la opción de configuración previa a la instalación</p><p><img src=\"/blog/assets/pictures/winvirt/virt-08.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-09.png\" alt=\"\" /></p><p>Cambiamos el tipo de disco a “virtio”</p><p><img src=\"/blog/assets/pictures/winvirt/virt-10.png\" alt=\"\" /></p><p>Cambiamos el tipo de red a “virtio”</p><p><img src=\"/blog/assets/pictures/winvirt/virt-11.png\" alt=\"\" /></p><p>Seleccionamos la opción de añadir hardware y configuramos la iso de virtio</p><p><img src=\"/blog/assets/pictures/winvirt/virt-13.png\" alt=\"\" /></p><p>Iniciamos la máquina virtual e instalamos Windows como siempre</p><p><img src=\"/blog/assets/pictures/winvirt/virt-15.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-16.png\" alt=\"\" /></p><p>Seleccionamos que no tenemos licencia (a menos que si tengas)</p><p><img src=\"/blog/assets/pictures/winvirt/virt-17.png\" alt=\"\" /></p><p>Seleccionamos la versión que deseamos instalar (a menos que ocupes funciones del pro, te recomiendo el home pues es mas ligero)</p><p><img src=\"/blog/assets/pictures/winvirt/virt-18.png\" alt=\"\" /></p><p>Aceptamos términos y condiciones</p><p><img src=\"/blog/assets/pictures/winvirt/virt-19.png\" alt=\"\" /></p><p>Seleccionamos instalación personalizada</p><p><img src=\"/blog/assets/pictures/winvirt/virt-20.png\" alt=\"\" /></p><p>Podemos ver que no se detecta ningún disco, debemos de seleccionar “cargar controlador”</p><p><img src=\"/blog/assets/pictures/winvirt/virt-21.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-22.png\" alt=\"\" /></p><p>Seleccionamos el controlador que termine con “win10”</p><p><img src=\"/blog/assets/pictures/winvirt/virt-24.png\" alt=\"\" /></p><p>Ahora podemos ver que tenemos el disco que creamos, lo seleccionamos  e instalamos.</p><p><img src=\"/blog/assets/pictures/winvirt/virt-26.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-27.png\" alt=\"\" /></p><p>Y damos a siguiente para empezar la instalación, toca esperar</p><p><img src=\"/blog/assets/pictures/winvirt/virt-28.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-29.png\" alt=\"\" /></p><p>Toca la configuración de siempre al instalar Windows</p><p><img src=\"/blog/assets/pictures/winvirt/virt-30.png\" alt=\"\" /></p><p>De momento no tenemos red pues no hemos cargado el controlador, tendremos que seleccionar “no tengo internet” y crear una cuenta local</p><p><img src=\"/blog/assets/pictures/winvirt/virt-31.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-32.png\" alt=\"\" /></p><p>¡Ya entramos al escritorio!</p><p><img src=\"/blog/assets/pictures/winvirt/virt-33.png\" alt=\"\" /></p><p>Tenemos que abrir administrador de dispositivos</p><p><img src=\"/blog/assets/pictures/winvirt/virt-34.png\" alt=\"\" /></p><p>En otros dispositivos seleccionamos el controlador de Ethernet y damos a actualizar controlador</p><p><img src=\"/blog/assets/pictures/winvirt/virt-36.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-37.png\" alt=\"\" /></p><p>Seleccionamos “Buscar controlador en mi equipo”</p><p><img src=\"/blog/assets/pictures/winvirt/virt-38.png\" alt=\"\" /></p><p>Seleccionamos el disco de virtio, en mi caso es el “E” y damos siguiente</p><p><img src=\"/blog/assets/pictures/winvirt/virt-39.png\" alt=\"\" /><img src=\"/blog/assets/pictures/winvirt/virt-40.png\" alt=\"\" /></p><p>Vemos que detecta el controlador de virtio, y damos cerrar</p><p><img src=\"/blog/assets/pictures/winvirt/virt-41.png\" alt=\"\" /></p><p>Este proceso se repite con todos los controladores de “Otros equipos” y también con el adaptador de pantalla.</p><p><img src=\"/blog/assets/pictures/winvirt/virt-42.png\" alt=\"\" /></p><p>Igualmente lo instalamos</p><p><img src=\"/blog/assets/pictures/winvirt/virt-43.png\" alt=\"\" /></p><p>¡Terminamos!</p><p><img src=\"/blog/assets/pictures/winvirt/virt-44.png\" alt=\"\" /></p><p>Puede que lo notes un poco lento pues Windows hace sus cosas de descargar actualizaciones y demás configuraciones pos-instalación, pero una vez que eso esté, podemos reiniciar y ya contaremos con una maquina virtual de Windows completamente funcional.</p><p><img src=\"/blog/assets/pictures/winvirt/virt-45.png\" alt=\"\" /></p><p>Espero que te haya sido de utilidad, en caso de querer activar Windows, te puedo recomendar utilizar <a href=\"https://github.com/massgravel/Microsoft-Activation-Scripts\">MAS</a> esto te permitirá personalizar el fondo de pantalla y demás :)</p>",
                "url": "/blog/kvm-qemu/2021/10/02/winvirt",
                
                
                "categories": ["kvm-qemu"],                
                
                "date_published": "2021-10-02T00:00:00+00:00",
                "date_modified": "2021-10-02T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            },
        
            {
                "title": "Guía basica de nftables",
                "content_text": "Hola! ¿qué tal estas? En este post voy a intentar explicar qué es nftables, por que y como usarlo junto con algunos ejemplos :)¿Qué es?Si leemos la wiki, nos enteramos que nftables no nada mas que el firewall del kernel de Linux, llegó para ser el sucesor de iptables, el tan conocido firewall, que por su estructura y sintaxis facilita la administración de firewall en sistemas Linux pudiendo reducir el número de reglas considerablemente  Algo a tener en cuenta es que nftables está disponible en kernels &gt;= 3.13, por lo que de tener un sistema con kernel menor, será difícil usarlo de forma correcta.¿Por qué nftables?Existen “front ends” del firewall de Linux como UFW o firewalld que pueden facilitar la configuración de un sistema, sin embargo, al final estos programas corren nftables por debajo, por lo que al tratar con nftables por default, simplificamos el sistema, a cambio de dificultarnos funciones como las zonas de firewalld. Sin embargo, si tu sistema es un pequeño servidor casero o en algún vps, puede ser que te convenga simplemente tratar con nftables.¿Cómo usar nftables?Primero que nada tenemos que saber si no hay otro firewall corriendo, en caso de estar, desactivarlo y opcionalmente desinstalarlo. Ya que no tenemos nada corriendo, podemos empezar a interactuar con el comando nft, esto siempre con privilegios de root.Nftables se maneja con tablas, cadenas y reglas, estando una dentro de la otra respectivamente, para listar la configuración actual, se usa:sudo nft list ruleset Output default:table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}Las reglas por default están claras, acepta TODO, como te imaginarás esto es algo un inseguro y poco practico.Como podemos ver todo esta dentro de una sola tabla llamada “filter” de tipo inet, el tipo inet significa que las reglas aplican tanto para ipv4 como para ipv6 (ya no mas duplicar reglas yei), dentro de la tabla se encuentran distintas cadenas, “input” que esta configurada como el filtro que va con dirección al sistema mismo desde el exterior, “forward” que esta configurada como el filtro que va con redireccionamiento (esto no se suele usar a menos que estés usando nat o algo así) y “output” que esta configurada como el filtro que va desde el sistema al exterior. Todas con la politica default de aceptar y no existen reglas dentro de estas, empecemos a crear algunasSupongamos que queremos bloquear el puerto 80 (http), para hacer esto se usa:sudo nft add rule inet filter input tcp dport 80 denyAhora supongamos que queremos bloquear el puerto 22 (ssh) para cierta ip externa, usamos:sudo nft add rule inet filter input ip saddr 8.8.8.8 tcp dport 22 denyComo podemos ver, para arreglar reglas se usa\tsudo nft add rule [familia] [tabla] [cadena] [declaración]Podemos imprimir para ver como van las reglas con sudo nft list ruleset, el output será:table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny\t\t\tip saddr 8.8.8.8 tcp dport 22 deny\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}Sencillo, ¿no?, ¿y si queremos borrar alguna? Bueno para eso en primer lugar debes conocer el número “handle”, esto se puede hacer con sudo nft -a list ruleset, ejemplo:table inet filter { # handle 4\tchain input { # handle 1\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny # handle 5\t\t\tip saddr 8.8.8.8 tcp dport 22 deny # handle 6\t}\tchain forward { # handle 2\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output { # handle 3\t\ttype filter hook output priority filter; policy accept;\t}}Ya con el número de la regla, se puede borrar la regla con \tsudo nft delete rule [familia] [tabla] [cadena] handle [número]Por ejemplo, para eliminar el bloqueo del puerto 80, usamos: sudo nft delete rule inet filter input handle 5Bueno y ahora puedes pensar, ¿cómo puedo guardar estas reglas para cuando reinicie el servidor? Bueno esto se consigue escribiendo en el archivo “/etc/nftables.conf” que es el que se ejecuta cuando inicia el servicio de nftables.Ejemplo de nftables.confEn este ejemplo se bloquea TODO lo que quiera entrar al servidor pero deja salir TODO a menos que cumpla algunas de las reglas. Esta es una configuración buena pero te recomiendo investigues para agregar o cerrar puertos dependiendo de tus necesidades.#!/usr/sbin/nft -fflush rulesettable inet filter {\t# Tirar todo lo que venga de entrada por default\tchain input {\ttype filter hook input priority filter; policy drop;\t\t# Si la conección es invalida, tirarlo desde un inicio \t\tct state invalid drop\t\t# Si la conección ya se establecio, aceptarlo\t\tct state { established, related } accept\t\t# Permitir el loopback pero no dejar que nada externo mande paquetes dentro\t\tiif \"lo\" accept\t\tiif != \"lo\" ip daddr 127.0.0.1/8 drop\t\tiif != \"lo\" ip6 daddr ::1/128 drop\t\t# Permitir el uso del ping\t\tip protocol icmp accept\t\tip6 nexthdr ipv6-icmp accept\t\t# Puertos para servicios:\t\tip saddr 192.168.1.0/24 tcp dport 22 accept # Aceptar ssh de la red local\t\tip saddr 192.168.1.0/24 tcp dport 445 accept # Aceptar samba de la red local\t\ttcp dport 443 accept # Aceptar https de cualquier origen\t}\t# Tirar todos los paqueter que se quieran redirigir\tchain forward {\ttype filter hook forward priority filter; policy drop;\t}\t# Permitir todas las salidas\tchain output {\ttype filter hook output priority filter; policy accept;\t}}Y ya, es simple, se pueden agregar distintas tablas, cadenas y cada una de distinto tipo, si quieres saber más, te recomiendo leas la wiki.",
                "content_html": "<p>Hola! ¿qué tal estas? En este post voy a intentar explicar qué es nftables, por que y como usarlo junto con algunos ejemplos :)</p><h1 id=\"qué-es\">¿Qué es?</h1><p>Si leemos la <a href=\"https://wiki.nftables.org/wiki-nftables/index.php/Main_Page\">wiki</a>, nos enteramos que nftables no nada mas que el firewall del kernel de Linux, llegó para ser el sucesor de iptables, el tan conocido firewall, que por su estructura y sintaxis facilita la administración de firewall en sistemas Linux pudiendo reducir el número de reglas considerablemente</p><blockquote>  <p>Algo a tener en cuenta es que nftables está disponible en kernels &gt;= 3.13, por lo que de tener un sistema con kernel menor, será difícil usarlo de forma correcta.</p></blockquote><h1 id=\"por-qué-nftables\">¿Por qué nftables?</h1><p>Existen “front ends” del firewall de Linux como <a href=\"https://wiki.ubuntu.com/UncomplicatedFirewall\">UFW</a> o <a href=\"https://firewalld.org/\">firewalld</a> que pueden facilitar la configuración de un sistema, sin embargo, al final estos programas corren nftables por debajo, por lo que al tratar con nftables por default, simplificamos el sistema, a cambio de dificultarnos funciones como las zonas de firewalld. Sin embargo, si tu sistema es un pequeño servidor casero o en algún vps, puede ser que te convenga simplemente tratar con nftables.</p><h1 id=\"cómo-usar-nftables\">¿Cómo usar nftables?</h1><p>Primero que nada tenemos que saber si no hay otro firewall corriendo, en caso de estar, desactivarlo y opcionalmente desinstalarlo. Ya que no tenemos nada corriendo, podemos empezar a interactuar con el comando <code class=\"language-plaintext highlighter-rouge\">nft</code>, esto siempre con privilegios de root.</p><p>Nftables se maneja con tablas, cadenas y reglas, estando una dentro de la otra respectivamente, para listar la configuración actual, se usa:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nft list ruleset Output default:table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Las reglas por default están claras, acepta TODO, como te imaginarás esto es algo un inseguro y poco practico.</p><p>Como podemos ver todo esta dentro de una sola tabla llamada “filter” de tipo inet, el <strong>tipo inet</strong> significa que las reglas aplican tanto para ipv4 como para ipv6 (ya no mas duplicar reglas yei), dentro de la tabla se encuentran distintas <strong>cadenas</strong>, <em>“input”</em> que esta configurada como el filtro que va con dirección al sistema mismo desde el exterior, <em>“forward”</em> que esta configurada como el filtro que va con redireccionamiento (esto no se suele usar a menos que estés usando nat o algo así) y <em>“output”</em> que esta configurada como el filtro que va desde el sistema al exterior. Todas con la politica default de aceptar y no existen reglas dentro de estas, empecemos a crear algunas</p><p>Supongamos que queremos bloquear el puerto 80 (http), para hacer esto se usa:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nft add rule inet filter input tcp dport 80 deny</code></pre></div></div><p>Ahora supongamos que queremos bloquear el puerto 22 (ssh) para cierta ip externa, usamos:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nft add rule inet filter input ip saddr 8.8.8.8 tcp dport 22 deny</code></pre></div></div><p>Como podemos ver, para arreglar reglas se usa\tsudo nft add rule [familia] [tabla] [cadena] [declaración]</p><p>Podemos imprimir para ver como van las reglas con <code class=\"language-plaintext highlighter-rouge\">sudo nft list ruleset</code>, el output será:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny\t\t\tip saddr 8.8.8.8 tcp dport 22 deny\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Sencillo, ¿no?, ¿y si queremos borrar alguna? Bueno para eso en primer lugar debes conocer el número “handle”, esto se puede hacer con <code class=\"language-plaintext highlighter-rouge\">sudo nft -a list ruleset</code>, ejemplo:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>table inet filter { # handle 4\tchain input { # handle 1\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny # handle 5\t\t\tip saddr 8.8.8.8 tcp dport 22 deny # handle 6\t}\tchain forward { # handle 2\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output { # handle 3\t\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Ya con el número de la regla, se puede borrar la regla con \tsudo nft delete rule [familia] [tabla] [cadena] handle [número]</p><p>Por ejemplo, para eliminar el bloqueo del puerto 80, usamos:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> sudo nft delete rule inet filter input handle 5</code></pre></div></div><p>Bueno y ahora puedes pensar, ¿cómo puedo guardar estas reglas para cuando reinicie el servidor? Bueno esto se consigue escribiendo en el archivo <strong>“/etc/nftables.conf”</strong> que es el que se ejecuta cuando inicia el servicio de nftables.</p><h1 id=\"ejemplo-de-nftablesconf\">Ejemplo de nftables.conf</h1><p>En este ejemplo se bloquea TODO lo que quiera entrar al servidor pero deja salir TODO a menos que cumpla algunas de las reglas. Esta es una configuración buena pero te recomiendo investigues para agregar o cerrar puertos dependiendo de tus necesidades.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#!/usr/sbin/nft -fflush rulesettable inet filter {\t# Tirar todo lo que venga de entrada por default\tchain input {\ttype filter hook input priority filter; policy drop;\t\t# Si la conección es invalida, tirarlo desde un inicio \t\tct state invalid drop\t\t# Si la conección ya se establecio, aceptarlo\t\tct state { established, related } accept\t\t# Permitir el loopback pero no dejar que nada externo mande paquetes dentro\t\tiif \"lo\" accept\t\tiif != \"lo\" ip daddr 127.0.0.1/8 drop\t\tiif != \"lo\" ip6 daddr ::1/128 drop\t\t# Permitir el uso del ping\t\tip protocol icmp accept\t\tip6 nexthdr ipv6-icmp accept\t\t# Puertos para servicios:\t\tip saddr 192.168.1.0/24 tcp dport 22 accept # Aceptar ssh de la red local\t\tip saddr 192.168.1.0/24 tcp dport 445 accept # Aceptar samba de la red local\t\ttcp dport 443 accept # Aceptar https de cualquier origen\t}\t# Tirar todos los paqueter que se quieran redirigir\tchain forward {\ttype filter hook forward priority filter; policy drop;\t}\t# Permitir todas las salidas\tchain output {\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Y ya, es simple, se pueden agregar distintas tablas, cadenas y cada una de distinto tipo, si quieres saber más, te recomiendo leas la <a href=\"https://wiki.nftables.org/wiki-nftables/index.php/Main_Page\">wiki</a>.</p>",
                "url": "/blog/firewall/2021/09/25/nftables",
                
                
                "categories": ["firewall"],                
                
                "date_published": "2021-09-25T00:00:00+00:00",
                "date_modified": "2021-09-25T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            },
        
            {
                "title": "Servidor de virtualización",
                "content_text": "IntroducciónHola! En este post voy a explicar como tener un servidor de virtualización en Debian, aunque estas instrucciones no son exclusivas para debian, pues se puede conseguir lo mismo en cualquier instalación de GNU/Linux, solo que los comandos difieren un poco.La utilidad de un servidor de virtualización es básicamente infinita, puedes emular cualquier Hardware ya sea para probar distintos sistemas operativos o para aislar distintos servicios, todo dependera de las posibilidades de tu hardware.Además del servidor de virtualización, se configurará un puente de red, esto con el objetivo de que las maquinas virtuales puedan acceder a la red local.Requerimientos  Computadora con Debian o derivada con Hardware de sobra para dar a maquinas virtuales  Conexión de Ethernet directa.  Servidor SSH para conexión remota. (Es posible seguir la guía de forma local)Instalar lo necesarioEn primer lugar es necesario instalar un conjunto de software para virtualizar. En este caso qemu-kvmapt install qemu qemu-kvm qemu-system qemu-utils libvirt-clients libvirt-daemon-system virtinst virt-manager bridge-utilsY activamos el demonio de libvirtsystemctl enable libvirtdPuente de redAhora es necesario verificar nuestra conexión a la red, esto se puede conseguir con el comandoip aEjemplo del resultado1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000   \t\t link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global dynamic enp1s0   \t\t\tvalid_lft 3538sec preferred_lft 3538sec\t\tinet6 fe80::5054:ff:feda:fdb4/64 scope link    \t\t\tvalid_lft forever preferred_lft foreverDesde aquí podemos verificar que la interfaz de nuestra conexión por Ethernet tiene como nombre enp1s0 y la ip es 192.168.122.220, sabiendo esto podemos crear el puente, necesitamos entrar al archivo de configuración de interfaces. En Debian es /etc/network/interfacesvim /etc/network/interfacesDentro debemos de escribir la configuración del puente, tras modificar el archivo debe quedar así (revisa la ip, gateway y el nombre de la interfaz pues pueden no ser las mismas).# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceallow-hotplug enp1s0iface enp1s0 inet staticauto br0iface br0 inet static\taddress 192.168.122.220\tnetmask 255.255.255.0\tgateway 192.168.122.1\tbridge_ports enp1s0\tup /usr/sbin/brctl stp br0 onYa que estamos seguros de nuestra configuración, reiniciaremos para que estas configuraciones se apliquen. Al reiniciar podremos ver nuestra configuración algo así.1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\t\tlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\t\tlink/ether da:64:e7:16:20:c8 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global br0   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 fe80::d864:e7ff:fe16:20c8/64 scope link    \t\t\tvalid_lft forever preferred_lft foreverComo podemos observar, ahora nuestra conexión se encuentra en la interfaz br0 que es nuestro puente.¡Listo! Ya tenemos red, ahora podemos empezar a crear nuestras máquinas virtuales.Creación de máquinas virtualesPara poder correr una máquina virtual, en primer lugar será necesario crear un disco para la máquina virtual.# Creamos el directorio para nuestros discosmkdir kvm# Creamos el disco, es posible cambiar el nombre y el tamaño del discoqemu-img create -f qcow2 ./debian.qcow2 8G# Agregamos la configuración para conectarnos con qemu mientras usemos los comandos virt-install y virshmkdir -p ~/.config/libvirt/echo 'uri_default = \"qemu:///system\"' | tee -a ~/.config/libvirt/libvirt.conf# (Opcional) Agregamos a nuestro usuario al grupo libvirtsudo usermod -a -G libvirt $(whoami)Ya que tenemos el disco, podemos instalar el sistema operativo.virt-install \\   \t\t--name debian `# Nombre de la máquina` \\\t\t--memory 1024 `# Cantidad de memoria RAM` \\ \t\t--disk path=./debian.qcow2,size=8,format=qcow2,bus=virtio `# Ubicación del disco de la máquina virtual` \\\t\t--vcpus 1 `# Número de núcleos para la maquina virtual` \\\t\t--os-type linux \\\t\t--os-variant debian11 `# Variante del sistema operativo` \\\t\t--network bridge=br0,model=virtio `# Nombre de la interfaz de red, en este caso br0` \\\t\t--graphics none `# Configuración sin interfaz gráfico` \\\t\t--console pty,target_type=serial \\\t\t--location 'http://ftp.debian.org/debian/dists/bullseye/main/installer-amd64/' \\\t\t`# centos stream 9 'http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/'` \\\t\t--extra-args 'console=ttyS0,115200n8 serial'Continuamos con nuestra instalación normal y ya podemos usar la máquina virtual. Puedes aprender como administrar la máquina virtual con el comandoman virshConclusiónCrear un servidor de virtualización suele sonar más complicado de lo que es, espero que esta guía te haya sido de utilidad. :)Algunas fuentesLast Dragon .(2021). Configurar Debian como servidor de virtualizacion con QEMU/KVM . Video de Youtube: https://www.youtube.com/watch?v=ADqWvmDbY0o",
                "content_html": "<h1 id=\"introducción\">Introducción</h1><p>Hola! En este post voy a explicar como tener un servidor de virtualización en Debian, aunque estas instrucciones no son exclusivas para debian, pues se puede conseguir lo mismo en cualquier instalación de GNU/Linux, solo que los comandos difieren un poco.</p><p>La utilidad de un servidor de virtualización es básicamente infinita, puedes emular cualquier Hardware ya sea para probar distintos sistemas operativos o para aislar distintos servicios, todo dependera de las posibilidades de tu hardware.</p><p>Además del servidor de virtualización, se configurará un puente de red, esto con el objetivo de que las maquinas virtuales puedan acceder a la red local.</p><h1 id=\"requerimientos\">Requerimientos</h1><ul>  <li>Computadora con Debian o derivada con Hardware de sobra para dar a maquinas virtuales</li>  <li>Conexión de Ethernet directa.</li>  <li>Servidor SSH para conexión remota. (Es posible seguir la guía de forma local)</li></ul><h1 id=\"instalar-lo-necesario\">Instalar lo necesario</h1><p>En primer lugar es necesario instalar un conjunto de software para virtualizar. En este caso qemu-kvm</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt install qemu qemu-kvm qemu-system qemu-utils libvirt-clients libvirt-daemon-system virtinst virt-manager bridge-utils</code></pre></div></div><p>Y activamos el demonio de libvirt</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>systemctl enable libvirtd</code></pre></div></div><h1 id=\"puente-de-red\">Puente de red</h1><p>Ahora es necesario verificar nuestra conexión a la red, esto se puede conseguir con el comando</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ip a</code></pre></div></div><p><strong>Ejemplo del resultado</strong></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000   \t\t link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global dynamic enp1s0   \t\t\tvalid_lft 3538sec preferred_lft 3538sec\t\tinet6 fe80::5054:ff:feda:fdb4/64 scope link    \t\t\tvalid_lft forever preferred_lft forever</code></pre></div></div><p>Desde aquí podemos verificar que la interfaz de nuestra conexión por Ethernet tiene como nombre enp1s0 y la ip es 192.168.122.220, sabiendo esto podemos crear el puente, necesitamos entrar al archivo de configuración de interfaces. En Debian es /etc/network/interfaces</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vim /etc/network/interfaces</code></pre></div></div><p>Dentro debemos de escribir la configuración del puente, tras modificar el archivo debe quedar así (revisa la ip, gateway y el nombre de la interfaz pues pueden no ser las mismas).</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceallow-hotplug enp1s0iface enp1s0 inet staticauto br0iface br0 inet static\taddress 192.168.122.220\tnetmask 255.255.255.0\tgateway 192.168.122.1\tbridge_ports enp1s0\tup /usr/sbin/brctl stp br0 on</code></pre></div></div><p>Ya que estamos seguros de nuestra configuración, reiniciaremos para que estas configuraciones se apliquen. Al reiniciar podremos ver nuestra configuración algo así.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\t\tlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\t\tlink/ether da:64:e7:16:20:c8 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global br0   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 fe80::d864:e7ff:fe16:20c8/64 scope link    \t\t\tvalid_lft forever preferred_lft forever</code></pre></div></div><p>Como podemos observar, ahora nuestra conexión se encuentra en la interfaz br0 que es nuestro puente.</p><p><strong>¡Listo!</strong> Ya tenemos red, ahora podemos empezar a crear nuestras máquinas virtuales.</p><h1 id=\"creación-de-máquinas-virtuales\">Creación de máquinas virtuales</h1><p>Para poder correr una máquina virtual, en primer lugar será necesario crear un disco para la máquina virtual.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Creamos el directorio para nuestros discosmkdir kvm# Creamos el disco, es posible cambiar el nombre y el tamaño del discoqemu-img create -f qcow2 ./debian.qcow2 8G# Agregamos la configuración para conectarnos con qemu mientras usemos los comandos virt-install y virshmkdir -p ~/.config/libvirt/echo 'uri_default = \"qemu:///system\"' | tee -a ~/.config/libvirt/libvirt.conf# (Opcional) Agregamos a nuestro usuario al grupo libvirtsudo usermod -a -G libvirt $(whoami)</code></pre></div></div><p>Ya que tenemos el disco, podemos instalar el sistema operativo.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>virt-install \\   \t\t--name debian `# Nombre de la máquina` \\\t\t--memory 1024 `# Cantidad de memoria RAM` \\ \t\t--disk path=./debian.qcow2,size=8,format=qcow2,bus=virtio `# Ubicación del disco de la máquina virtual` \\\t\t--vcpus 1 `# Número de núcleos para la maquina virtual` \\\t\t--os-type linux \\\t\t--os-variant debian11 `# Variante del sistema operativo` \\\t\t--network bridge=br0,model=virtio `# Nombre de la interfaz de red, en este caso br0` \\\t\t--graphics none `# Configuración sin interfaz gráfico` \\\t\t--console pty,target_type=serial \\\t\t--location 'http://ftp.debian.org/debian/dists/bullseye/main/installer-amd64/' \\\t\t`# centos stream 9 'http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/'` \\\t\t--extra-args 'console=ttyS0,115200n8 serial'</code></pre></div></div><p>Continuamos con nuestra instalación normal y ya podemos usar la máquina virtual. Puedes aprender como administrar la máquina virtual con el comando</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>man virsh</code></pre></div></div><h1 id=\"conclusión\">Conclusión</h1><p>Crear un servidor de virtualización suele sonar más complicado de lo que es, espero que esta guía te haya sido de utilidad. :)</p><h3 id=\"algunas-fuentes\">Algunas fuentes</h3><p>Last Dragon .(2021). Configurar Debian como servidor de virtualizacion con QEMU/KVM . Video de Youtube: https://www.youtube.com/watch?v=ADqWvmDbY0o</p>",
                "url": "/blog/kvm-qemu/2021/08/17/kvm-server",
                
                
                "categories": ["kvm-qemu"],                
                
                "date_published": "2021-08-17T00:00:00+00:00",
                "date_modified": "2021-08-17T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            },
        
            {
                "title": "¿Un blog?",
                "content_text": "Este es mi post de introducción, intentare responder algunas preguntas que puedes tener apartir de la existencia de este blog.¿Por qué un blog?Pense en como podría tener mis notas o mini-tutoriales, tenerlas en github puede ser útil pero no es fácil compartirlo además de que ahí no lo documento en español por lo que si quiero dirigir a alguíen a mi documentación, el tema del lenguaje lo puede complicar por lo que llegué a la conclusión de que lo mejor será realizar post esporadicamente en este medio.  El blog entero se encontrará en español, sin embargo, algunas notas pueden contener frases en inglés por las tecnologías que se ocupan.¿Qué tan seguído se publicarán post nuevos?Realmente no existirá un calendario, principalmente son notas, sin embargo, intentaré al menos publicar sobre algo interesante una vez al mes.¿Sobre qué serán los posts?Mayormente sobre tecnología, nueva y no tan nueva, mayormente del estilo no tan abstracto, tecnologías como contenedores en linux, seguridad en servidores, desplegar algún servicio, máquinas virtuales pero si tendré algunas notas sobre lenguajes de programación.",
                "content_html": "<p>Este es mi post de introducción, intentare responder algunas preguntas que puedes tener apartir de la existencia de este blog.</p><h4 id=\"por-qué-un-blog\">¿Por qué un blog?</h4><p>Pense en como podría tener mis notas o mini-tutoriales, tenerlas en github puede ser útil pero no es fácil compartirlo además de que ahí no lo documento en español por lo que si quiero dirigir a alguíen a mi documentación, el tema del lenguaje lo puede complicar por lo que llegué a la conclusión de que lo mejor será realizar post esporadicamente en este medio.</p><blockquote>  <p>El blog entero se encontrará en español, sin embargo, algunas notas pueden contener frases en inglés por las tecnologías que se ocupan.</p></blockquote><h4 id=\"qué-tan-seguído-se-publicarán-post-nuevos\">¿Qué tan seguído se publicarán post nuevos?</h4><p>Realmente no existirá un calendario, principalmente son notas, sin embargo, intentaré al menos publicar sobre algo interesante una vez al mes.</p><h4 id=\"sobre-qué-serán-los-posts\">¿Sobre qué serán los posts?</h4><p>Mayormente sobre tecnología, nueva y no tan nueva, mayormente del estilo no tan abstracto, tecnologías como contenedores en linux, seguridad en servidores, desplegar algún servicio, máquinas virtuales pero si tendré algunas notas sobre lenguajes de programación.</p>",
                "url": "/blog/personal/2021/08/07/Intro",
                
                
                "categories": ["personal"],                
                
                "date_published": "2021-08-07T00:00:00+00:00",
                "date_modified": "2021-08-07T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            }
        
    ],
    "pages": [
            
            {
                "id": "404",
                "title": 404,
                "content_text": "## Página no disponible :(La página a la que intentas acceder no existe o no está disponible.> Go [back]({{site.baseurl}}/)",
                "content_html": "## Página no disponible :(La página a la que intentas acceder no existe o no está disponible.> Go [back]({{site.baseurl}}/)",
                "url": "/blog/404.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "ksobrenatural",
                "title": "ksobrenatural",
                "content_text": "Hola, soy ksobrenatural de México.Me interesan muchas cosas en la vida, algunas de ellas son:- El uso, aprendizaje y promoción del software libre.- Ver películas y series, no todas son buenas, pero por lo menos son algo entretenidas. Una de mis series favoritas es sobrenatural, de ahí mi username.- Experimentar con sistemas operativos.- Conocer personas ;)- Viajar- Conocer platillos nuevos.Puedes contactarme por medio de mi correo electrónico o por medio de telegram, intento contestar lo antes posible.Si deseas hacer una donación económica, aquí se encuentra mi monedero de la criptomoneda, Monero.![monero](https://github.com/ksobrenat32/ksobrenat32/blob/main/monero.png?raw=true)[Mi Github](https://github.com/ksobrenat32)[Mi Correo](mailto:ksobrenatural.7r4ty@8shield.net)## NotaSi encuentras un fallo ortográfico, de redacción, técnico o en general cualquier fallo, por favor, házmelo notar, si tienes cuenta de github abre un issue, de lo contrario mándame un mensaje, lo agradeceré mucho :)",
                "content_html": "Hola, soy ksobrenatural de México.Me interesan muchas cosas en la vida, algunas de ellas son:- El uso, aprendizaje y promoción del software libre.- Ver películas y series, no todas son buenas, pero por lo menos son algo entretenidas. Una de mis series favoritas es sobrenatural, de ahí mi username.- Experimentar con sistemas operativos.- Conocer personas ;)- Viajar- Conocer platillos nuevos.Puedes contactarme por medio de mi correo electrónico o por medio de telegram, intento contestar lo antes posible.Si deseas hacer una donación económica, aquí se encuentra mi monedero de la criptomoneda, Monero.![monero](https://github.com/ksobrenat32/ksobrenat32/blob/main/monero.png?raw=true)[Mi Github](https://github.com/ksobrenat32)[Mi Correo](mailto:ksobrenatural.7r4ty@8shield.net)## NotaSi encuentras un fallo ortográfico, de redacción, técnico o en general cualquier fallo, por favor, házmelo notar, si tienes cuenta de github abre un issue, de lo contrario mándame un mensaje, lo agradeceré mucho :)",
                "url": "/blog/about.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "content_html": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "url": "/blog/api.json",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "blog",
                "title": "Blog",
                "content_text": "{% for post in site.posts %}{% if post.visible==1 %}{{post.title}}{%- endif -%}{%endfor%}",
                "content_html": "{% for post in site.posts %}{% if post.visible==1 %}<a href=\"{{site.baseurl}}{{post.url}}\">{{post.title}}</a>{%- endif -%}{%endfor%}",
                "url": "/blog/",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xsl\" href=\"{{ \"/sitemap.xsl\" | absolute_url }}\"?>{% endif %}<urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}<url><loc>{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if doc.last_modified_at or doc.date %}<lastmod>{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}<url><loc>{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if page.last_modified_at %}<lastmod>{{ page.last_modified_at | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}<url><loc>{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}</loc><lastmod>{{ file.modified_time | date_to_xmlschema }}</lastmod></url>{% endfor %}</urlset>",
                "url": "/blog/sitemap.xml",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "content_html": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "url": "/blog/robots.txt",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xml\" href=\"{{ '/feed.xslt.xml' | absolute_url }}\"?>{% endif %}<feed xmlns=\"http://www.w3.org/2005/Atom\" {% if site.lang %}xml:lang=\"{{ site.lang }}\"{% endif %}><generator uri=\"https://jekyllrb.com/\" version=\"{{ jekyll.version }}\">Jekyll</generator><link href=\"{{ page.url | absolute_url }}\" rel=\"self\" type=\"application/atom+xml\" /><link href=\"{{ '/' | absolute_url }}\" rel=\"alternate\" type=\"text/html\" {% if site.lang %}hreflang=\"{{ site.lang }}\" {% endif %}/><updated>{{ site.time | date_to_xmlschema }}</updated><id>{{ page.url | absolute_url | xml_escape }}</id>{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}<title type=\"html\">{{ title | smartify | xml_escape }}</title>{% endif %}{% if site.description %}<subtitle>{{ site.description | xml_escape }}</subtitle>{% endif %}{% if site.author %}<author><name>{{ site.author.name | default: site.author | xml_escape }}</name>{% if site.author.email %}<email>{{ site.author.email | xml_escape }}</email>{% endif %}{% if site.author.uri %}<uri>{{ site.author.uri | xml_escape }}</uri>{% endif %}</author>{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}<entry{% if post.lang %}{{\" \"}}xml:lang=\"{{ post.lang }}\"{% endif %}><title type=\"html\">{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}</title><link href=\"{{ post.url | absolute_url }}\" rel=\"alternate\" type=\"text/html\" title=\"{{ post.title | xml_escape }}\" /><published>{{ post.date | date_to_xmlschema }}</published><updated>{{ post.last_modified_at | default: post.date | date_to_xmlschema }}</updated><id>{{ post.id | absolute_url | xml_escape }}</id>{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}<content type=\"html\" xml:base=\"{{ post.url | absolute_url | xml_escape }}\">{{ post.content | strip | xml_escape }}</content>{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}<author><name>{{ post_author_name | default: \"\" | xml_escape }}</name>{% if post_author_email %}<email>{{ post_author_email | xml_escape }}</email>{% endif %}{% if post_author_uri %}<uri>{{ post_author_uri | xml_escape }}</uri>{% endif %}</author>{% if post.category %}<category term=\"{{ post.category | xml_escape }}\" />{% endif %}{% for tag in post.tags %}<category term=\"{{ tag | xml_escape }}\" />{% endfor %}{% if post.excerpt and post.excerpt != empty %}<summary type=\"html\">{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}</summary>{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}<media:thumbnail xmlns:media=\"http://search.yahoo.com/mrss/\" url=\"{{ post_image | xml_escape }}\" /><media:content medium=\"image\" url=\"{{ post_image | xml_escape }}\" xmlns:media=\"http://search.yahoo.com/mrss/\" />{% endif %}</entry>{% endfor %}</feed>",
                "url": "/blog/feed.xml",
                "date_published": "",
                "date_modified": ""
            }
        
    ]           
}