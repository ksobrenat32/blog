{
    "website_title": "Mi blog",
    "website_url": "/blog/",
    "posts": [
        
            {
                "title": "Guía basica de nftables",
                "content_text": "Hola! ¿qué tal estas? En este post voy a intentar explicar qué es nftables, por que y como usarlo junto con algunos ejemplos :)¿Qué es?Si leemos la wiki, nos enteramos que nftables no nada mas que el firewall del kernel de Linux, llegó para ser el sucesor de iptables, el tan conocido firewall, que por su estructura y sintaxis facilita la administración de firewall en sistemas Linux pudiendo reducir el número de reglas considerablemente  Algo a tener en cuenta es que nftables está disponible en kernels &gt;= 3.13, por lo que de tener un sistema con kernel menor, será difícil usarlo de forma correcta.¿Por qué nftables?Existen “front ends” del firewall de Linux como UFW o firewalld que pueden facilitar la configuración de un sistema, sin embargo, al final estos programas corren nftables por debajo, por lo que al tratar con nftables por default, simplificamos el sistema, a cambio de dificultarnos funciones como las zonas de firewalld. Sin embargo, si tu sistema es un pequeño servidor casero o en algún vps, puede ser que te convenga simplemente tratar con nftables.¿Cómo usar nftables?Primero que nada tenemos que saber si no hay otro firewall corriendo, en caso de estar, desactivarlo y opcionalmente desinstalarlo. Ya que no tenemos nada corriendo, podemos empezar a interactuar con el comando nft, esto siempre con privilegios de root.Nftables se maneja con tablas, cadenas y reglas, estando una dentro de la otra respectivamente, para listar la configuración actual, se usa:sudo nft list ruleset Output default:table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}Las reglas por default están claras, acepta TODO, como te imaginarás esto es algo un inseguro y poco practico.Como podemos ver todo esta dentro de una sola tabla llamada “filter” de tipo inet, el tipo inet significa que las reglas aplican tanto para ipv4 como para ipv6 (ya no mas duplicar reglas yei), dentro de la tabla se encuentran distintas cadenas, “input” que esta configurada como el filtro que va con dirección al sistema mismo desde el exterior, “forward” que esta configurada como el filtro que va con redireccionamiento (esto no se suele usar a menos que estés usando nat o algo así) y “output” que esta configurada como el filtro que va desde el sistema al exterior. Todas con la politica default de aceptar y no existen reglas dentro de estas, empecemos a crear algunasSupongamos que queremos bloquear el puerto 80 (http), para hacer esto se usa:sudo nft add rule inet filter input tcp dport 80 denyAhora supongamos que queremos bloquear el puerto 22 (ssh) para cierta ip externa, usamos:sudo nft add rule inet filter input ip saddr 8.8.8.8 tcp dport 22 denyComo podemos ver, para arreglar reglas se usa\tsudo nft add rule [familia] [tabla] [cadena] [declaración]Podemos imprimir para ver como van las reglas con sudo nft list ruleset, el output será:table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny\t\t\tip saddr 8.8.8.8 tcp dport 22 deny\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}Sencillo, ¿no?, ¿y si queremos borrar alguna? Bueno para eso en primer lugar debes conocer el número “handle”, esto se puede hacer con sudo nft -a list ruleset, ejemplo:table inet filter { # handle 4\tchain input { # handle 1\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny # handle 5\t\t\tip saddr 8.8.8.8 tcp dport 22 deny # handle 6\t}\tchain forward { # handle 2\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output { # handle 3\t\ttype filter hook output priority filter; policy accept;\t}}Ya con el número de la regla, se puede borrar la regla con \tsudo nft delete rule [familia] [tabla] [cadena] handle [número]Por ejemplo, para eliminar el bloqueo del puerto 80, usamos: sudo nft delete rule inet filter input handle 5Bueno y ahora puedes pensar, ¿cómo puedo guardar estas reglas para cuando reinicie el servidor? Bueno esto se consigue escribiendo en el archivo “/etc/nftables.conf” que es el que se ejecuta cuando inicia el servicio de nftables.Ejemplo de nftables.confEn este ejemplo se bloquea TODO lo que quiera entrar al servidor pero deja salir TODO a menos que cumpla algunas de las reglas. Esta es una configuración buena pero te recomiendo investigues para agregar o cerrar puertos dependiendo de tus necesidades.#!/usr/sbin/nft -fflush rulesettable inet filter {\t# Tirar todo lo que venga de entrada por default\tchain input {\ttype filter hook input priority filter; policy drop;\t\t# Si la conección es invalida, tirarlo desde un inicio \t\tct state invalid drop\t\t# Si la conección ya se establecio, aceptarlo\t\tct state { established, related } accept\t\t# Permitir el loopback pero no dejar que nada externo mande paquetes dentro\t\tiif \"lo\" accept\t\tiif != \"lo\" ip daddr 127.0.0.0/8\t\tiif != \"lo\" ip6 daddr ::1\t\t# Permitir el uso del ping\t\tip protocol icmp accept\t\tip6 nexthdr ipv6-icmp accept\t\t# Puertos para servicios:\t\tip saddr 192.168.1.0/24 tcp dport 22 accept # Aceptar ssh de la red local\t\tip saddr 192.168.1.0/24 tcp dport 445 accept # Aceptar samba de la red local\t\ttcp dport 443 accept # Aceptar https de cualquier origen\t}\t# Tirar todos los paqueter que se quieran redirigir\tchain forward {\ttype filter hook forward priority filter; policy drop;\t}\t# Permitir todas las salidas\tchain output {\ttype filter hook output priority filter; policy accept;\t}}Y ya, es simple, se pueden agregar distintas tablas, cadenas y cada una de distinto tipo, si quieres saber más, te recomiendo leas la wiki.",
                "content_html": "<p>Hola! ¿qué tal estas? En este post voy a intentar explicar qué es nftables, por que y como usarlo junto con algunos ejemplos :)</p><h1 id=\"qué-es\">¿Qué es?</h1><p>Si leemos la <a href=\"https://wiki.nftables.org/wiki-nftables/index.php/Main_Page\">wiki</a>, nos enteramos que nftables no nada mas que el firewall del kernel de Linux, llegó para ser el sucesor de iptables, el tan conocido firewall, que por su estructura y sintaxis facilita la administración de firewall en sistemas Linux pudiendo reducir el número de reglas considerablemente</p><blockquote>  <p>Algo a tener en cuenta es que nftables está disponible en kernels &gt;= 3.13, por lo que de tener un sistema con kernel menor, será difícil usarlo de forma correcta.</p></blockquote><h1 id=\"por-qué-nftables\">¿Por qué nftables?</h1><p>Existen “front ends” del firewall de Linux como <a href=\"https://wiki.ubuntu.com/UncomplicatedFirewall\">UFW</a> o <a href=\"https://firewalld.org/\">firewalld</a> que pueden facilitar la configuración de un sistema, sin embargo, al final estos programas corren nftables por debajo, por lo que al tratar con nftables por default, simplificamos el sistema, a cambio de dificultarnos funciones como las zonas de firewalld. Sin embargo, si tu sistema es un pequeño servidor casero o en algún vps, puede ser que te convenga simplemente tratar con nftables.</p><h1 id=\"cómo-usar-nftables\">¿Cómo usar nftables?</h1><p>Primero que nada tenemos que saber si no hay otro firewall corriendo, en caso de estar, desactivarlo y opcionalmente desinstalarlo. Ya que no tenemos nada corriendo, podemos empezar a interactuar con el comando <code class=\"language-plaintext highlighter-rouge\">nft</code>, esto siempre con privilegios de root.</p><p>Nftables se maneja con tablas, cadenas y reglas, estando una dentro de la otra respectivamente, para listar la configuración actual, se usa:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nft list ruleset Output default:table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Las reglas por default están claras, acepta TODO, como te imaginarás esto es algo un inseguro y poco practico.</p><p>Como podemos ver todo esta dentro de una sola tabla llamada “filter” de tipo inet, el <strong>tipo inet</strong> significa que las reglas aplican tanto para ipv4 como para ipv6 (ya no mas duplicar reglas yei), dentro de la tabla se encuentran distintas <strong>cadenas</strong>, <em>“input”</em> que esta configurada como el filtro que va con dirección al sistema mismo desde el exterior, <em>“forward”</em> que esta configurada como el filtro que va con redireccionamiento (esto no se suele usar a menos que estés usando nat o algo así) y <em>“output”</em> que esta configurada como el filtro que va desde el sistema al exterior. Todas con la politica default de aceptar y no existen reglas dentro de estas, empecemos a crear algunas</p><p>Supongamos que queremos bloquear el puerto 80 (http), para hacer esto se usa:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nft add rule inet filter input tcp dport 80 deny</code></pre></div></div><p>Ahora supongamos que queremos bloquear el puerto 22 (ssh) para cierta ip externa, usamos:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nft add rule inet filter input ip saddr 8.8.8.8 tcp dport 22 deny</code></pre></div></div><p>Como podemos ver, para arreglar reglas se usa\tsudo nft add rule [familia] [tabla] [cadena] [declaración]</p><p>Podemos imprimir para ver como van las reglas con <code class=\"language-plaintext highlighter-rouge\">sudo nft list ruleset</code>, el output será:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>table inet filter {\tchain input {\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny\t\t\tip saddr 8.8.8.8 tcp dport 22 deny\t}\tchain forward {\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output {\t\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Sencillo, ¿no?, ¿y si queremos borrar alguna? Bueno para eso en primer lugar debes conocer el número “handle”, esto se puede hacer con <code class=\"language-plaintext highlighter-rouge\">sudo nft -a list ruleset</code>, ejemplo:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>table inet filter { # handle 4\tchain input { # handle 1\t\ttype filter hook input priority filter; policy accept;\t\t\ttcp dport 80 deny # handle 5\t\t\tip saddr 8.8.8.8 tcp dport 22 deny # handle 6\t}\tchain forward { # handle 2\t\ttype filter hook forward priority filter; policy accept;\t}\tchain output { # handle 3\t\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Ya con el número de la regla, se puede borrar la regla con \tsudo nft delete rule [familia] [tabla] [cadena] handle [número]</p><p>Por ejemplo, para eliminar el bloqueo del puerto 80, usamos:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> sudo nft delete rule inet filter input handle 5</code></pre></div></div><p>Bueno y ahora puedes pensar, ¿cómo puedo guardar estas reglas para cuando reinicie el servidor? Bueno esto se consigue escribiendo en el archivo <strong>“/etc/nftables.conf”</strong> que es el que se ejecuta cuando inicia el servicio de nftables.</p><h1 id=\"ejemplo-de-nftablesconf\">Ejemplo de nftables.conf</h1><p>En este ejemplo se bloquea TODO lo que quiera entrar al servidor pero deja salir TODO a menos que cumpla algunas de las reglas. Esta es una configuración buena pero te recomiendo investigues para agregar o cerrar puertos dependiendo de tus necesidades.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#!/usr/sbin/nft -fflush rulesettable inet filter {\t# Tirar todo lo que venga de entrada por default\tchain input {\ttype filter hook input priority filter; policy drop;\t\t# Si la conección es invalida, tirarlo desde un inicio \t\tct state invalid drop\t\t# Si la conección ya se establecio, aceptarlo\t\tct state { established, related } accept\t\t# Permitir el loopback pero no dejar que nada externo mande paquetes dentro\t\tiif \"lo\" accept\t\tiif != \"lo\" ip daddr 127.0.0.0/8\t\tiif != \"lo\" ip6 daddr ::1\t\t# Permitir el uso del ping\t\tip protocol icmp accept\t\tip6 nexthdr ipv6-icmp accept\t\t# Puertos para servicios:\t\tip saddr 192.168.1.0/24 tcp dport 22 accept # Aceptar ssh de la red local\t\tip saddr 192.168.1.0/24 tcp dport 445 accept # Aceptar samba de la red local\t\ttcp dport 443 accept # Aceptar https de cualquier origen\t}\t# Tirar todos los paqueter que se quieran redirigir\tchain forward {\ttype filter hook forward priority filter; policy drop;\t}\t# Permitir todas las salidas\tchain output {\ttype filter hook output priority filter; policy accept;\t}}</code></pre></div></div><p>Y ya, es simple, se pueden agregar distintas tablas, cadenas y cada una de distinto tipo, si quieres saber más, te recomiendo leas la <a href=\"https://wiki.nftables.org/wiki-nftables/index.php/Main_Page\">wiki</a>.</p>",
                "url": "/blog/firewall/2021/09/25/nftables/",
                
                
                "categories": ["firewall"],                
                
                "date_published": "2021-09-25T00:00:00+00:00",
                "date_modified": "2021-09-25T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            },
        
            {
                "title": "Servidor de virtualización en Raspberry Pi 4",
                "content_text": "IntroducciónHola! En este post voy a explicar como tener un servidor de virtualización en una Raspberry Pi 4, aunque estas instrucciones no son exclusivas de la Raspberry pues se puede conseguir lo mismo en cualquier Hardware que tenga instalado GNU/Linux.La utilidad de un servidor de virtualización es básicamente infinita, puedes emular cualquier Hardware ya sea para probar distintos sistemas operativos o para aislar distintos servicios. En este caso al ser un Hardware relativamente débil y con poca memoria, como lo es la Raspberry Pi 4, no será posible correr múltiples máquinas virtuales.Además del servidor de virtualización, se configurará un puente de red, esto con el objetivo de poder acceder a las máquinas virtuales desde la red local.¿Qué se necesita?  Computadora con Debian o derivada como sistema operativo y espacio suficiente para tus máquinas virtuales. (En este caso una Raspberry Pi 4, 4 GB RAM con micro sd de 64 GB).  Conexión de Ethernet para conectarte a la red.  Servidor SSH para conexión remota. (Es posible seguir la guía de forma local)Instalar lo necesarioEn primer lugar es necesario instalar un conjunto de software para virtualizar. En este caso qemu-kvmapt install qemu qemu-kvm qemu-system qemu-utils libvirt-clients libvirt-daemon-system virtinst virt-manager bridge-utilsY activamos el demonio de libvirtsystemctl enable libvirtdPuente de redAhora es necesario verificar nuestra conexión a la red, esto se puede conseguir con el comandoip aEjemplo del resultado1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000   \t\t link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global dynamic enp1s0   \t\t\tvalid_lft 3538sec preferred_lft 3538sec\t\tinet6 fe80::5054:ff:feda:fdb4/64 scope link    \t\t\tvalid_lft forever preferred_lft foreverDesde aquí podemos verificar que la interfaz de nuestra conexión por Ethernet tiene como nombre enp1s0 y la ip es 192.168.122.220, sabiendo esto podemos crear el puente, necesitamos entrar al archivo de configuración de interfaces. En Debian es /etc/network/interfacesvim /etc/network/interfacesDentro debemos de escribir la configuración del puente, tras modificar el archivo debe quedar así (revisa la ip, gateway y el nombre de la interfaz pues pueden no ser las mismas).# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceallow-hotplug enp1s0iface enp1s0 inet staticauto br0iface br0 inet static\taddress 192.168.122.220\tnetmask 255.255.255.0\tgateway 192.168.122.1\tbridge_ports enp1s0\tup /usr/sbin/brctl stp br0 onYa que estamos seguros de nuestra configuración, reiniciaremos para que estas configuraciones se apliquen. Al reiniciar podremos ver nuestra configuración algo así.1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\t\tlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\t\tlink/ether da:64:e7:16:20:c8 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global br0   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 fe80::d864:e7ff:fe16:20c8/64 scope link    \t\t\tvalid_lft forever preferred_lft foreverComo podemos observar, ahora nuestra conexión se encuentra en la interfaz br0 que es nuestro puente.¡Listo! Ya tenemos red, ahora podemos empezar a crear nuestras máquinas virtuales.Creación de máquinas virtualesPara poder correr una máquina virtual, en primer lugar será necesario crear un disco para la máquina virtual.# Creamos el directorio para nuestros discosmkdir kvm# Creamos el disco, es posible cambiar el nombre y el tamaño del discoqemu-img create -f qcow2 ./debian.qcow2 8G# Agregamos la configuración para conectarnos con qemu mientras usemos los comandos virt-install y virshmkdir -p ~/.config/libvirt/echo 'uri_default = \"qemu:///system\"' | tee -a ~/.config/libvirt/libvirt.confYa que tenemos el disco, podemos instalar el sistema operativo.virt-install \\\t# Nombre de la máquina   \t\t--name debian \\\t# Cantidad de memoria RAM\t\t--memory 1024 \\ \t# Ubicación del disco de la máquina virtual\t\t--disk path=./debian.qcow2,size=8,format=qcow2,bus=virtio \\\t# Número de núcleos para la maquina virtual\t\t--vcpus 1 \\\t\t--os-type linux \\\t# Variante del sistema operativo\t\t--os-variant debian10 \\\t# Nombre de la interfaz de red, en este caso br0\t\t--network bridge=br0,model=virtio \\\t# Configuración sin interfaz gráfico\t\t--graphics none \\\t\t--console pty,target_type=serial \\\t# Dirección de la instalación (cambiar la arquitectura si no usas arm64)\t\t--location 'http://ftp.debian.org/debian/dists/buster/main/installer-arm64/' \\\t\t--extra-args 'console=ttyS0,115200n8 serial'Continuamos con nuestra instalación normal y ya podemos usar la máquina virtual. Puedes aprender como administrar la máquina virtual con el comandoman virshConclusiónCrear un servidor de virtualización suele sonar más complicado de lo que es, espero que esta guía te haya sido de utilidad. :)Algunas fuentesLast Dragon .(2021). Configurar Debian como servidor de virtualizacion con QEMU/KVM . Video de Youtube: https://www.youtube.com/watch?v=ADqWvmDbY0o",
                "content_html": "<h1 id=\"introducción\">Introducción</h1><p>Hola! En este post voy a explicar como tener un servidor de virtualización en una Raspberry Pi 4, aunque estas instrucciones no son exclusivas de la Raspberry pues se puede conseguir lo mismo en cualquier Hardware que tenga instalado GNU/Linux.</p><p>La utilidad de un servidor de virtualización es básicamente infinita, puedes emular cualquier Hardware ya sea para probar distintos sistemas operativos o para aislar distintos servicios. En este caso al ser un Hardware relativamente débil y con poca memoria, como lo es la Raspberry Pi 4, no será posible correr múltiples máquinas virtuales.</p><p>Además del servidor de virtualización, se configurará un puente de red, esto con el objetivo de poder acceder a las máquinas virtuales desde la red local.</p><h1 id=\"qué-se-necesita\">¿Qué se necesita?</h1><ul>  <li>Computadora con Debian o derivada como sistema operativo y espacio suficiente para tus máquinas virtuales. (En este caso una Raspberry Pi 4, 4 GB RAM con micro sd de 64 GB).</li>  <li>Conexión de Ethernet para conectarte a la red.</li>  <li>Servidor SSH para conexión remota. (Es posible seguir la guía de forma local)</li></ul><h1 id=\"instalar-lo-necesario\">Instalar lo necesario</h1><p>En primer lugar es necesario instalar un conjunto de software para virtualizar. En este caso qemu-kvm</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt install qemu qemu-kvm qemu-system qemu-utils libvirt-clients libvirt-daemon-system virtinst virt-manager bridge-utils</code></pre></div></div><p>Y activamos el demonio de libvirt</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>systemctl enable libvirtd</code></pre></div></div><h1 id=\"puente-de-red\">Puente de red</h1><p>Ahora es necesario verificar nuestra conexión a la red, esto se puede conseguir con el comando</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ip a</code></pre></div></div><p><strong>Ejemplo del resultado</strong></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000   \t\t link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global dynamic enp1s0   \t\t\tvalid_lft 3538sec preferred_lft 3538sec\t\tinet6 fe80::5054:ff:feda:fdb4/64 scope link    \t\t\tvalid_lft forever preferred_lft forever</code></pre></div></div><p>Desde aquí podemos verificar que la interfaz de nuestra conexión por Ethernet tiene como nombre enp1s0 y la ip es 192.168.122.220, sabiendo esto podemos crear el puente, necesitamos entrar al archivo de configuración de interfaces. En Debian es /etc/network/interfaces</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vim /etc/network/interfaces</code></pre></div></div><p>Dentro debemos de escribir la configuración del puente, tras modificar el archivo debe quedar así (revisa la ip, gateway y el nombre de la interfaz pues pueden no ser las mismas).</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceallow-hotplug enp1s0iface enp1s0 inet staticauto br0iface br0 inet static\taddress 192.168.122.220\tnetmask 255.255.255.0\tgateway 192.168.122.1\tbridge_ports enp1s0\tup /usr/sbin/brctl stp br0 on</code></pre></div></div><p>Ya que estamos seguros de nuestra configuración, reiniciaremos para que estas configuraciones se apliquen. Al reiniciar podremos ver nuestra configuración algo así.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\t\tlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\t\tinet 127.0.0.1/8 scope host lo   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 ::1/128 scope host    \t\t\tvalid_lft forever preferred_lft forever2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\t\tlink/ether 52:54:00:da:fd:b4 brd ff:ff:ff:ff:ff:ff3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\t\tlink/ether da:64:e7:16:20:c8 brd ff:ff:ff:ff:ff:ff\t\tinet 192.168.122.220/24 brd 192.168.122.255 scope global br0   \t\t\tvalid_lft forever preferred_lft forever\t\tinet6 fe80::d864:e7ff:fe16:20c8/64 scope link    \t\t\tvalid_lft forever preferred_lft forever</code></pre></div></div><p>Como podemos observar, ahora nuestra conexión se encuentra en la interfaz br0 que es nuestro puente.</p><p><strong>¡Listo!</strong> Ya tenemos red, ahora podemos empezar a crear nuestras máquinas virtuales.</p><h1 id=\"creación-de-máquinas-virtuales\">Creación de máquinas virtuales</h1><p>Para poder correr una máquina virtual, en primer lugar será necesario crear un disco para la máquina virtual.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Creamos el directorio para nuestros discosmkdir kvm# Creamos el disco, es posible cambiar el nombre y el tamaño del discoqemu-img create -f qcow2 ./debian.qcow2 8G# Agregamos la configuración para conectarnos con qemu mientras usemos los comandos virt-install y virshmkdir -p ~/.config/libvirt/echo 'uri_default = \"qemu:///system\"' | tee -a ~/.config/libvirt/libvirt.conf</code></pre></div></div><p>Ya que tenemos el disco, podemos instalar el sistema operativo.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>virt-install \\\t# Nombre de la máquina   \t\t--name debian \\\t# Cantidad de memoria RAM\t\t--memory 1024 \\ \t# Ubicación del disco de la máquina virtual\t\t--disk path=./debian.qcow2,size=8,format=qcow2,bus=virtio \\\t# Número de núcleos para la maquina virtual\t\t--vcpus 1 \\\t\t--os-type linux \\\t# Variante del sistema operativo\t\t--os-variant debian10 \\\t# Nombre de la interfaz de red, en este caso br0\t\t--network bridge=br0,model=virtio \\\t# Configuración sin interfaz gráfico\t\t--graphics none \\\t\t--console pty,target_type=serial \\\t# Dirección de la instalación (cambiar la arquitectura si no usas arm64)\t\t--location 'http://ftp.debian.org/debian/dists/buster/main/installer-arm64/' \\\t\t--extra-args 'console=ttyS0,115200n8 serial'</code></pre></div></div><p>Continuamos con nuestra instalación normal y ya podemos usar la máquina virtual. Puedes aprender como administrar la máquina virtual con el comando</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>man virsh</code></pre></div></div><h1 id=\"conclusión\">Conclusión</h1><p>Crear un servidor de virtualización suele sonar más complicado de lo que es, espero que esta guía te haya sido de utilidad. :)</p><h3 id=\"algunas-fuentes\">Algunas fuentes</h3><p>Last Dragon .(2021). Configurar Debian como servidor de virtualizacion con QEMU/KVM . Video de Youtube: https://www.youtube.com/watch?v=ADqWvmDbY0o</p>",
                "url": "/blog/kvm-qemu/2021/08/17/kvm-server/",
                
                
                "categories": ["kvm-qemu"],                
                
                "date_published": "2021-08-17T00:00:00+00:00",
                "date_modified": "2021-08-17T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            },
        
            {
                "title": "¿Un blog?",
                "content_text": "Este es mi post de introducción, intentare responder algunas preguntas que puedes tener apartir de la existencia de este blog.¿Por qué un blog?Pense en como podría tener mis notas o mini-tutoriales, tenerlas en github puede ser útil pero no es fácil compartirlo además de que ahí no lo documento en español por lo que si quiero dirigir a alguíen a mi documentación, el tema del lenguaje lo puede complicar por lo que llegué a la conclusión de que lo mejor será realizar post esporadicamente en este medio.  El blog entero se encontrará en español, sin embargo, algunas notas pueden contener frases en inglés por las tecnologías que se ocupan.¿Qué tan seguído se publicarán post nuevos?Realmente no existirá un calendario, principalmente son notas, sin embargo, intentaré al menos publicar sobre algo interesante una vez al mes.¿Sobre qué serán los posts?Mayormente sobre tecnología, nueva y no tan nueva, mayormente del estilo no tan abstracto, tecnologías como contenedores en linux, seguridad en servidores, desplegar algún servicio, máquinas virtuales pero si tendré algunas notas sobre lenguajes de programación.",
                "content_html": "<p>Este es mi post de introducción, intentare responder algunas preguntas que puedes tener apartir de la existencia de este blog.</p><h4 id=\"por-qué-un-blog\">¿Por qué un blog?</h4><p>Pense en como podría tener mis notas o mini-tutoriales, tenerlas en github puede ser útil pero no es fácil compartirlo además de que ahí no lo documento en español por lo que si quiero dirigir a alguíen a mi documentación, el tema del lenguaje lo puede complicar por lo que llegué a la conclusión de que lo mejor será realizar post esporadicamente en este medio.</p><blockquote>  <p>El blog entero se encontrará en español, sin embargo, algunas notas pueden contener frases en inglés por las tecnologías que se ocupan.</p></blockquote><h4 id=\"qué-tan-seguído-se-publicarán-post-nuevos\">¿Qué tan seguído se publicarán post nuevos?</h4><p>Realmente no existirá un calendario, principalmente son notas, sin embargo, intentaré al menos publicar sobre algo interesante una vez al mes.</p><h4 id=\"sobre-qué-serán-los-posts\">¿Sobre qué serán los posts?</h4><p>Mayormente sobre tecnología, nueva y no tan nueva, mayormente del estilo no tan abstracto, tecnologías como contenedores en linux, seguridad en servidores, desplegar algún servicio, máquinas virtuales pero si tendré algunas notas sobre lenguajes de programación.</p>",
                "url": "/blog/personal/2021/08/07/Intro/",
                
                
                "categories": ["personal"],                
                
                "date_published": "2021-08-07T00:00:00+00:00",
                "date_modified": "2021-08-07T00:00:00+00:00",
                
                "author":  "ksobrenatural" 
                
            }
        
    ],
    "pages": [
            
            {
                "id": "404",
                "title": 404,
                "content_text": "## Página no disponible :(La página a la que intentas acceder no existe o no está disponible.> Go [back]({{site.baseurl}}/)",
                "content_html": "## Página no disponible :(La página a la que intentas acceder no existe o no está disponible.> Go [back]({{site.baseurl}}/)",
                "url": "/blog/404.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "ksobrenatural",
                "title": "ksobrenatural",
                "content_text": "Hola, soy ksobrenatural de México.Me interesan muchas cosas en la vida, algunas de ellas son:- El uso, aprendizaje y promoción del software libre.- Ver películas y series, no todas son buenas, pero por lo menos son algo entretenidas. Una de mis series favoritas es sobrenatural, de ahí mi username.- Aprender sobre tecnologías como Bash, C, Python, Contenedores en Linux.- Experimentar con sistemas operativos.Puedes contactarme por medio de mi correo electrónico o por medio de telegram.Si deseas hacer una donación económica, aquí se encuentra mi monedero de la criptomoneda, Monero.[Mi Github](https://github.com/ksobrenat32)[Mi Correo](mailto:ksobrenatural.7r4ty@8shield.net)",
                "content_html": "Hola, soy ksobrenatural de México.Me interesan muchas cosas en la vida, algunas de ellas son:- El uso, aprendizaje y promoción del software libre.- Ver películas y series, no todas son buenas, pero por lo menos son algo entretenidas. Una de mis series favoritas es sobrenatural, de ahí mi username.- Aprender sobre tecnologías como Bash, C, Python, Contenedores en Linux.- Experimentar con sistemas operativos.Puedes contactarme por medio de mi correo electrónico o por medio de telegram.Si deseas hacer una donación económica, aquí se encuentra mi monedero de la criptomoneda, Monero.<img src=\"https://github.com/ksobrenat32/ksobrenat32/blob/main/monero.png?raw=true\" alt=\"drawing\" width=\"150\"/>[Mi Github](https://github.com/ksobrenat32)[Mi Correo](mailto:ksobrenatural.7r4ty@8shield.net)",
                "url": "/blog/about.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "content_html": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "url": "/blog/api.json",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "blog",
                "title": "Blog",
                "content_text": "{% for post in site.posts %}{% if post.visible==1 %}{{post.title}}{%- endif -%}{%endfor%}",
                "content_html": "{% for post in site.posts %}{% if post.visible==1 %}<a href=\"{{site.baseurl}}{{post.url}}\">{{post.title}}</a>{%- endif -%}{%endfor%}",
                "url": "/blog/",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xsl\" href=\"{{ \"/sitemap.xsl\" | absolute_url }}\"?>{% endif %}<urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}<url><loc>{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if doc.last_modified_at or doc.date %}<lastmod>{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}<url><loc>{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if page.last_modified_at %}<lastmod>{{ page.last_modified_at | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}<url><loc>{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}</loc><lastmod>{{ file.modified_time | date_to_xmlschema }}</lastmod></url>{% endfor %}</urlset>",
                "url": "/blog/sitemap.xml",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "content_html": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "url": "/blog/robots.txt",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xml\" href=\"{{ '/feed.xslt.xml' | absolute_url }}\"?>{% endif %}<feed xmlns=\"http://www.w3.org/2005/Atom\" {% if site.lang %}xml:lang=\"{{ site.lang }}\"{% endif %}><generator uri=\"https://jekyllrb.com/\" version=\"{{ jekyll.version }}\">Jekyll</generator><link href=\"{{ page.url | absolute_url }}\" rel=\"self\" type=\"application/atom+xml\" /><link href=\"{{ '/' | absolute_url }}\" rel=\"alternate\" type=\"text/html\" {% if site.lang %}hreflang=\"{{ site.lang }}\" {% endif %}/><updated>{{ site.time | date_to_xmlschema }}</updated><id>{{ page.url | absolute_url | xml_escape }}</id>{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}<title type=\"html\">{{ title | smartify | xml_escape }}</title>{% endif %}{% if site.description %}<subtitle>{{ site.description | xml_escape }}</subtitle>{% endif %}{% if site.author %}<author><name>{{ site.author.name | default: site.author | xml_escape }}</name>{% if site.author.email %}<email>{{ site.author.email | xml_escape }}</email>{% endif %}{% if site.author.uri %}<uri>{{ site.author.uri | xml_escape }}</uri>{% endif %}</author>{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}<entry{% if post.lang %}{{\" \"}}xml:lang=\"{{ post.lang }}\"{% endif %}><title type=\"html\">{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}</title><link href=\"{{ post.url | absolute_url }}\" rel=\"alternate\" type=\"text/html\" title=\"{{ post.title | xml_escape }}\" /><published>{{ post.date | date_to_xmlschema }}</published><updated>{{ post.last_modified_at | default: post.date | date_to_xmlschema }}</updated><id>{{ post.id | absolute_url | xml_escape }}</id>{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}<content type=\"html\" xml:base=\"{{ post.url | absolute_url | xml_escape }}\">{{ post.content | strip | xml_escape }}</content>{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}<author><name>{{ post_author_name | default: \"\" | xml_escape }}</name>{% if post_author_email %}<email>{{ post_author_email | xml_escape }}</email>{% endif %}{% if post_author_uri %}<uri>{{ post_author_uri | xml_escape }}</uri>{% endif %}</author>{% if post.category %}<category term=\"{{ post.category | xml_escape }}\" />{% endif %}{% for tag in post.tags %}<category term=\"{{ tag | xml_escape }}\" />{% endfor %}{% if post.excerpt and post.excerpt != empty %}<summary type=\"html\">{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}</summary>{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}<media:thumbnail xmlns:media=\"http://search.yahoo.com/mrss/\" url=\"{{ post_image | xml_escape }}\" /><media:content medium=\"image\" url=\"{{ post_image | xml_escape }}\" xmlns:media=\"http://search.yahoo.com/mrss/\" />{% endif %}</entry>{% endfor %}</feed>",
                "url": "/blog/feed.xml",
                "date_published": "",
                "date_modified": ""
            }
        
    ]           
}